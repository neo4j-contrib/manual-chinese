[[tutorial-comparing-models]]
比较各种数据库模型
=========

图数据库通过在一张图上存储节点和关系来持久化我们的数据结构。比起其他持久化数据模型如何呢？因为图是一种常规数据结构，让我们与其他的进行一下比较试试看。

== 从图数据库转换成 RDBMS ==

将所有的数据用竖立的堆栈表示，并且保持他们直接的关系，你可以看到下面一张图。一个 RDBMS 被优化用于聚合数据，而Neo4j擅长于高度关联的数据。

.RDBMS
["dot", "graphdb-compare-rdbms.svg", "meta", scaledwidth="40%"]
----
edge [arrowhead="none" arrowtail="none"]
rankdir="LR"
subgraph cluster_0 {
  color="invis";
  A [shape="record" label="<1>A1|<2>A2|<3>A3"
   fillcolor="NODEHIGHLIGHT"]
}

subgraph cluster_1 {
  color="invis";
  B [shape="record" label="<1>B1|<2>B2|<3>B3|<4>B4|<5>B5|<6>B6|<7>B7"]
}

subgraph cluster_2 {
  color="invis";
  label=""
  C [shape="record" label="<1>C1|<2>C2|<3>C3"
   fillcolor="NODE2HIGHLIGHT"]
}

A:1 -> B:1
A:1 -> B:2
A:2 -> B:4
A:2 -> B:6
A:3 -> B:3
A:3 -> B:5
A:3 -> B:7
C:1 -> B:1
C:1 -> B:4
C:1 -> B:5
C:2 -> B:3
C:2 -> B:7
C:3 -> B:2
C:3 -> B:6
----

.用图实现RDBMS模型
["dot", "graphdb-compare-rdbms-g.svg", "meta", scaledwidth="100%"]
----
edge [arrowhead="none" arrowtail="none"]

A1 [fillcolor="NODEHIGHLIGHT"]
A2 [fillcolor="NODEHIGHLIGHT"]
A3 [fillcolor="NODEHIGHLIGHT"]

C1 [fillcolor="NODE2HIGHLIGHT"]
C2 [fillcolor="NODE2HIGHLIGHT"]
C3 [fillcolor="NODE2HIGHLIGHT"]

A1 -> B1
A1 -> B2
A2 -> B4
A2 -> B6
A3 -> B3
A3 -> B5
A3 -> B7
C1 -> B1
C1 -> B4
C1 -> B5
C2 -> B3
C2 -> B7
C3 -> B2
C3 -> B6
----


== 从图数据库转换成Key-Value数据库 ==

Key-Value模型适合用于简单的数据或者列表。当数据之间不断交互关联时，你更需要一张图模型。Neo4j让你能惊醒制作简单的数据结构到复杂，互相连接的数据。

.Key-Value 存储模型
["dot", "graphdb-compare-kvstore.svg", "meta"]
----
rankdir="LR"

K [shape="record" label="<1>K1|<2>K2|<3>K3" fillcolor="NODEHIGHLIGHT"]
V1 [shape="record" label="<v>V1|K2"]
V2 [shape="record" label="<v>V2|K1|K3"]
V3 [shape="record" label="<v>V3|K1"]

K:1 -> V1:v
K:2 -> V2:v
K:3 -> V3:v
----

K* 代表一个键，V* 代表一个值。请注意，某些键指向其他键以及普通值。

.用图实现 Key-Value 模型
["dot", "graphdb-compare-kvstore-g.svg", "meta"]
----
rankdir="LR"

gV1 [label="V1"]
gV2 [label="V2"]
gV3 [label="V3"]

subgraph cluster_0 {
  color="invis"
  rank="same"
  K1 [fillcolor="NODEHIGHLIGHT"]
  K2 [fillcolor="NODEHIGHLIGHT"]
  K3 [fillcolor="NODEHIGHLIGHT"]
}

K1 -> gV1
gV1 -> gV2
gV2 -> gV1
gV2 -> gV3
gV3 -> gV1
K2 -> gV2
K3 -> gV3
----

== 从图数据库转换成列数据库 ==

列式（大表）数据库是 Key-Value模型的升级，用 “”来允许行数据增加。如果存储一张图，这个表将是分层的，关系也是非常明确的。


== 从图数据库转换成文档型数据库 ==

文档型数据库用文档进行层次划分，而自由的数据规划也很容易被表示成一颗树。成长为一张图的话，文档之间的关联你需要更有代表性的数据结构来存储，而在Neo4j中，这些关系是非常容易处理的。

.文档型数据库
["dot", "graphdb-compare-docdb.svg", "meta", scaledwidth="75%"]
----
subgraph cluster_0 {
  color="BOXCOLOR"
  label="D1"
  style="filled"
  fillcolor="NODEHIGHLIGHT"
  subgraph cluster_1 {
    label="S1"
    fillcolor="NODE2HIGHLIGHT"
    V1
    "D2/S2"
  }
}
subgraph cluster_2 {
  color="BOXCOLOR"
  label="D2"
  style="filled"
  fillcolor="NODEHIGHLIGHT"
  subgraph cluster_3 {
    label="S2"
    fillcolor="NODE2HIGHLIGHT"
    V2
    V3
  }
  subgraph cluster_4 {
    label="S3"
    fillcolor="NODE2HIGHLIGHT"
    V4
    "D1/S1"
  }
}
----

+D+=文档, +S+=子文档, +V+=值, +D2/S2+ = 关联到（其他）文档的索引。

.从图数据库转换成文档型数据库
["dot", "graphdb-compare-docdb-g.svg", "meta", scaledwidth="75%"]
----
rankdir="LR"

subgraph cluster_0 {
  color="invis"
  D1 [fillcolor="NODEHIGHLIGHT"]
  D2 [fillcolor="NODEHIGHLIGHT"]
}

subgraph cluster_1 {
  color="invis"
  rank="TB"
  S1 [fillcolor="NODE2HIGHLIGHT"]
  S2 [fillcolor="NODE2HIGHLIGHT"]
  S3 [fillcolor="NODE2HIGHLIGHT"]
}

D1 -> S1 -> V1
D2 -> S2 -> V2
D2 -> S3 -> V4
S1 -> S2
S2 -> V3
S3 -> S1
----


